library(ggplot2)
library(manipulate)
myfig <- function(n){
lambda <- 0.2
mns1 <- NULL
for (i in 1 : 1000) mns1 = c(mns1, mean(rexp(n, rate = lambda)))
x1 <- cbind(mns1, rep(n,1000))
df <- data.frame(x1)
colnames(df) <- c("x","size")
df$"size"<- as.factor(df$"size")
g <- ggplot(df, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..)) + labs(title = "Fig.4 The distribution of sample mean and the Normal distribution")
g <- g + stat_function(fun = dnorm, args = list(mean = 5, sd = 5/sqrt(n)), color="blue") + geom_density(fill=NA, colour="red")
g
}
manipulate(myfig(n), n = slider(10, 100, step = 10))
library(ggplot2)
library(manipulate)
myfig <- function(n){
lambda <- 0.2
mns1 <- NULL
for (i in 1 : 1000) mns1 = c(mns1, mean(rexp(n, rate = lambda)))
x1 <- cbind(mns1, rep(n,1000))
df <- data.frame(x1)
colnames(df) <- c("x","size")
df$"size"<- as.factor(df$"size")
g <- ggplot(df, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..)) + labs(title = "Fig.4 The distribution of sample mean and the Normal distribution")
g <- g + stat_function(fun = dnorm, args = list(mean = 5, sd = 5/sqrt(n)), color="blue") + geom_density(fill=NA, colour="red")
g
}
manipulate(myfig(n), n = slider(10, 300, step = 10))
library(ggplot2)
library(manipulate)
myfig <- function(n){
lambda <- 0.2
mns1 <- NULL
for (i in 1 : 1000) mns1 = c(mns1, mean(rexp(n, rate = lambda)))
x1 <- cbind(mns1, rep(n,1000))
df <- data.frame(x1)
colnames(df) <- c("x","size")
df$"size"<- as.factor(df$"size")
g <- ggplot(df, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..)) + labs(title = "Fig.4 The distribution of sample mean and the Normal distribution")
g <- g + stat_function(fun = dnorm, args = list(mean = 5, sd = 5/sqrt(n)), color="blue") + geom_density(fill=NA, colour="red")
g
}
manipulate(myfig(n), n = slider(10, 500, step = 10))
library(manipulate)
library(ggplot2)
myfig <- function(n){
lambda <- 0.2
mns1 <- NULL
mns1 <- cumsum(rexp(n*1000, rate = lambda))/(1 : (n*1000))
#mns1 <- cumsum(rnorm(n*1000))/(1 : (n*1000))
g <- ggplot(data.frame(x = 1: (n*1000), y = mns1), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 1/lambda) + geom_line(size = 1)
#g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g1 <- g + labs(x = "Number of obs", y = "Cumulative mean")
print(g1)
#------------------
lambda <- 0.2
mns1 <- NULL
for (i in 1 : 1000) mns1 = c(mns1, mean(rexp(n, rate = lambda)))
x1 <- cbind(mns1, rep(n,1000))
df <- data.frame(x1)
colnames(df) <- c("x","size")
df$"size"<- as.factor(df$"size")
g <- ggplot(df, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.1, colour = "black", aes(y = ..density..)) + labs(title = "Fig.4 The distribution of sample mean and the Normal distribution")
g2 <- g + stat_function(fun = dnorm, args = list(mean = 5, sd = 5/sqrt(n)), color="blue") + geom_density(fill=NA, colour="red")
print(g2)
}
manipulate(myfig(n), n = slider(10, 100, step = 10))
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
head(df)
x1
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('hist')
shiny::runApp('clt_app')
shiny::runApp('clt_app')
seted("clt_slidify")
setwd("clt_slidify")
publish_github(repo="clt_slidify", username ="iamxyz")
library(slidify)
setwd("clt_slidify")
